name: .NET Core Desktop

on:
  workflow_dispatch:

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest 
    env:
      Solution_Name: Neptuo.Productivity.SnippetManager.sln
      Wap_Project_Directory: src\Neptuo.Productivity.SnippetManager.Package
      Wap_Project_Path: src\Neptuo.Productivity.SnippetManager.Package\Neptuo.Productivity.SnippetManager.Package.wapproj
      CODESIGN_PWD: ${{secrets.CODESIGN_PWD}}
      CODESIGN_BASE64: ${{secrets.CODESIGN_B64}}
      GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration 
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("$env:CODESIGN_BASE64")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath cr.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        New-Item -Path . -Name "bin" -ItemType "Directory"

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: | 
        dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true -o bin

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\cr.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: snippet_manager
        path: bin

    - name: Create Release
      run: |
        gh release create v1.0.0 "bin/snippet_manager.zip"
      env:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
